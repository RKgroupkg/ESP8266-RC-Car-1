
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <WebSocketsServer.h>
#include "index.h"


#define motor1Pin1 D2  // The ESP8266 pin connected to the IN1 pin L298N
#define motor1Pin2 D3  // The ESP8266 pin connected to the IN2 pin L298N
#define motor2Pin1 D7  // The ESP8266 pin connected to the IN3 pin L298N
#define motor2Pin2 D8  // The ESP8266 pin connected to the IN4 pin L298N
#define EnablePin D1

const char* ssid = "Rkgroup";     // CHANGE IT
const char* password = "ketan100";  // CHANGE IT

ESP8266WebServer server(80);                        // Web server on port 80
WebSocketsServer webSocket = WebSocketsServer(81);  // WebSocket server on port 81


//

void moveForward() {
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, HIGH);
}
void sf(){
  digitalWrite(motor2Pin2, LOW);
  
}
// Function to move the robot backward
void moveBackward() {
  digitalWrite(motor2Pin1, HIGH);
  digitalWrite(motor2Pin2, LOW);
}
void sb(){
  digitalWrite(motor2Pin1, LOW);

}
// Function to turn the robot left
void turnLeft() {
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, LOW);
}
 void sl(){
  digitalWrite(motor1Pin1, LOW);

 }
// Function to turn the robot right
void turnRight() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH);
}

void sr(){
  digitalWrite(motor1Pin2, LOW);
}

void Complete_stop() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, LOW);
}



void webSocketEvent(uint8_t num, WStype_t type, uint8_t* payload, size_t length) {
  switch (type) {
    case WStype_DISCONNECTED:
      Serial.printf("[%u] Disconnected !\n", num);
      Complete_stop();
      break;
    case WStype_CONNECTED:
      {
        IPAddress ip = webSocket.remoteIP(num);
        Serial.printf("[%u] Connected  from %d.%d.%d.%d\n", num, ip[0], ip[1], ip[2], ip[3]);
      }
      break;
    case WStype_TEXT:
      String message = String((char*)payload);

      if (message.startsWith("speed:")) { // Check if the message contains a speed command
        int speed = message.substring(6).toInt(); // Extract the speed value from the message
        Serial.print("Speed set to: ");
        Serial.println(speed);
        analogWrite(EnablePin,speed);
      } else {
        String command = message;
        Serial.print("Command received: ");
        Serial.println(command);

        if (command.length() == 1) {
          char c = command.charAt(0);
          switch (c) {
          case 'f':
            moveForward(); 
            webSocket.sendTXT(num, "f");
            break;
          case 'b':
            moveBackward();
            webSocket.sendTXT(num, "b");
            break;
          case 'l':
            turnLeft();
            webSocket.sendTXT(num, "l");
            break;
          case 'r':
            turnRight();
            webSocket.sendTXT(num, "r");
            break;
          case 's': 
            Complete_stop();
            webSocket.sendTXT(num, "s");
            break;
          case 'e':
            sf();
            webSocket.sendTXT(num, "e");
            break;
          case 't':
            sb();
            webSocket.sendTXT(num, "t");
            break;
          case 'q':
            sl();
            webSocket.sendTXT(num, "q");
            break;
          case 'w':
            sr();
            webSocket.sendTXT(num, "w");
            break;
          default:
            Serial.println("Invalid command:  " + command);
            webSocket.sendTXT(num, "error");
            break;
          
          
        }

        } else {
          Serial.println("Invalid Message from server:  " + command);
        }
      }
      break;
  }
}

void setup() {
  Serial.begin(9600);

  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);
  pinMode(EnablePin, OUTPUT);

  analogWrite(EnablePin,255);
  
  

  // Configure ESP8266 as an access point
  WiFi.mode(WIFI_AP);
  WiFi.softAP(ssid, password);
  
  Serial.println("Connected to WiFi");

  // Initialize WebSocket server
  webSocket.begin();
  webSocket.onEvent(webSocketEvent);

  // Serve a basic HTML page with JavaScript to create the WebSocket connection
  server.on("/", HTTP_GET, []() {
    Serial.println("Web Server: received a web page request");
    String html = HTML_CONTENT;  // Use the HTML content from the servo_html.h file
    server.send(200, "text/html", html);
  });

  server.begin();
  Serial.print("Web Server's IP address: ");
  Serial.println(WiFi.softAPIP());
}

void loop() {
  // Handle client requests
  server.handleClient();

  // Handle WebSocket events
  webSocket.loop();

  // TO DO: Your code here
}
